Part A

Bubble Sort using Brute Force Technique

c
Run
Copy code
#include <stdio.h>

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    bubbleSort(arr, n);
    printf("Sorted array: \n");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}
Selection Sort using Brute Force Technique

c
Run
Copy code
#include <stdio.h>

void selectionSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        int min_idx = i;
        for (int j = i+1; j < n; j++)
            if (arr[j] < arr[min_idx])
                min_idx = j;
        int temp = arr[min_idx];
        arr[min_idx] = arr[i];
        arr[i] = temp;
    }
}

int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    selectionSort(arr, n);
    printf("Sorted array: \n");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}
String Matching using Brute Force Technique

c
Run
Copy code
#include <stdio.h>
#include <string.h>

void bruteForceSearch(char *text, char *pattern) {
    int n = strlen(text);
    int m = strlen(pattern);
    for (int i = 0; i <= n - m; i++) {
        int j;
        for (j = 0; j < m; j++)
            if (text[i + j] != pattern[j])
                break;
        if (j == m)
            printf("Pattern found at index %d\n", i);
    }
}

int main() {
    char text[100], pattern[100];
    printf("Enter text: ");
    scanf("%s", text);
    printf("Enter pattern: ");
    scanf("%s", pattern);
    bruteForceSearch(text, pattern);
    return 0;
}
Binary Search using Divide and Conquer Technique

c
Run
Copy code
#include <stdio.h>

int binarySearch(int arr[], int left, int right, int x) {
    if (right >= left) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == x)
            return mid;
        if (arr[mid] > x)
            return binarySearch(arr, left, mid - 1, x);
        return binarySearch(arr, mid + 1, right, x);
    }
    return -1;
}

int main() {
    int n, x;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter %d sorted elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    printf("Enter element to search: ");
    scanf("%d", &x);
    int result = binarySearch(arr, 0, n - 1, x);
    (result == -1) ? printf("Element not present in array\n") : printf("Element found at index %d\n", result);
    return 0;
}
Insertion Sort using Decrease and Conquer Technique

c
Run
Copy code
#include <stdio.h>

void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    insertionSort(arr, n);
    printf("Sorted array: \n");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}
Floyd's Method using Dynamic Programming

c
Run
Copy code
#include <stdio.h>
#define V 4

void floydWarshall(int graph[][V]) {
    int dist[V][V], i, j, k;
    for (i = 0; i < V; i++)
        for (j = 0; j < V; j++)
            dist[i][j] = graph[i][j];

    for (k = 0; k < V; k++) {
        for (i = 0; i < V; i++) {
            for (j = 0; j < V; j++) {
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }

    printf("Shortest distances between every pair of vertices:\n");
    for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
            if (dist[i][j] == 99999)
                printf("INF ");
            else
                printf("%d ", dist[i][j]);
        }
        printf("\n");
    }
}
c
Run
Copy code
  int main() {
      int graph[V][V];
      printf("Enter the adjacency matrix for the graph (use 99999 for infinity):\n");
      for (int i = 0; i < V; i++) {
          for (int j = 0; j < V; j++) {
              scanf("%d", &graph[i][j]);
          }
      }
      floydWarshall(graph);
      return 0;
  }
Warshallâ€™s Method using Dynamic Programming
c
Run
Copy code
#include <stdio.h>
#define V 4

void warshall(int graph[][V]) {
    int reach[V][V], i, j, k;
    for (i = 0; i < V; i++)
        for (j = 0; j < V; j++)
            reach[i][j] = graph[i][j];

    for (k = 0; k < V; k++) {
        for (i = 0; i < V; i++) {
            for (j = 0; j < V; j++) {
                reach[i][j] = reach[i][j] || (reach[i][k] && reach[k][j]);
            }
        }
    }

    printf("Transitive closure of the given graph:\n");
    for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
            printf("%d ", reach[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int graph[V][V];
    printf("Enter the adjacency matrix for the graph (use 0 for no edge):\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    warshall(graph);
    return 0;
}
Part B

Merge Sort using Divide and Conquer Technique

c
Run
Copy code
#include <stdio.h>

void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0; j = 0; k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    mergeSort(arr, 0, n - 1);
    printf("Sorted array: \n");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}
Quick Sort using Divide and Conquer Technique

c
Run
Copy code
#include <stdio.h>

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);
    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return (i + 1);
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    quickSort(arr, 0, n - 1);
    printf("Sorted array: \n");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}
Depth First Search (DFS) using Decrease and Conquer Technique

c
Run
Copy code
#include <stdio.h>
#include <stdlib.h>

void DFSUtil(int v, int visited[], int graph[][4], int V) {
    visited[v] = 1;
    printf("%d ", v);
    for (int i = 0; i < V; i++) {
        if (graph[v][i] == 1 && !visited[i]) {
            DFSUtil(i, visited, graph, V);
        }
    }
}

void DFS(int graph[][4], int V) {
    int visited[V];
    for (int i = 0; i < V; i++)
        visited[i] = 0;
    for (int i = 0; i < V; i++) {
        if (!visited[i]) {
            DFSUtil(i, visited, graph, V);
        }
    }
}

int main() {
    int graph[4][4];
    printf("Enter the adjacency matrix for the graph (0 for no edge, 1 for edge):\n");
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    printf("Depth First Traversal starting from vertex 0:\n");
    DFS(graph, 4);
    return 0;
}
Breadth First Search (BFS) using Decrease and Conquer Technique

c
Run
Copy code
#include <stdio.h>
#include <stdlib.h>

void BFS(int start, int graph[][4], int V) {
    int visited[V];
    for (int i = 0; i < V; i++)
        visited[i] = 0;

    int queue[V], front = -1, rear = -1;
    visited[start] = 1;
    queue[++rear] = start;

    while (front < rear) {
        int current = queue[++front];
        printf("%d ", current);
        for (int i = 0; i < V; i++) {
            if (graph[current][i] == 1 && !visited[i]) {
                visited[i] = 1;
                queue[++rear] = i;
            }
        }
    }
}

int main() {
    int graph[4][4];
    printf("Enter the adjacency matrix for the graph (0 for no edge, 1 for edge):\n");
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    printf("Breadth First Traversal starting from vertex 0:\n");
    BFS(0, graph, 4);
    return 0;
}
Topological Sorting using Decrease and Conquer Technique

c
Run
Copy code
#include <stdio.h>
#include <stdlib.h>

void topologicalSortUtil(int v, int visited[], int stack[], int *top, int graph[][4], int V) {
    visited[v] = 1;
    for (int i = 0; i < V; i++) {
        if (graph[v][i] == 1 && !visited[i]) {
            topologicalSortUtil(i, visited, stack, top, graph, V);
        }
    }
    stack[(*top)++] = v;
}

void topologicalSort(int graph[][4], int V) {
    int visited[V];
    int stack[V];
    int top = 0;

    for (int i = 0; i < V; i++)
        visited[i] = 0;

    for (int i = 0; i < V; i++) {
        if (!visited[i]) {
            topologicalSortUtil(i, visited, stack, &top, graph, V);
        }
    }

    printf("Topological Sort: ");
    for (int i = top - 1; i >= 0; i--) {
        printf("%d ", stack[i]);
    }
    printf("\n");
}

int main() {
    int graph[4][4];
    printf("Enter the adjacency matrix for the directed graph (0 for no edge, 1 for edge):\n");
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    topologicalSort(graph, 4);
    return 0;
}
Horspoolâ€™s Algorithm using Space and Time Tradeoff Technique

c
Run
Copy code
#include <stdio.h>
#include <string.h>

void horspool(char *text, char *pattern) {
    int m = strlen(pattern);
    int n = strlen(text);
    int shift[256];
    for (int i = 0; i < 256; i++)
        shift[i] = m; // Default shift value

    for (int i = 0; i < m - 1; i++)
        shift[(unsigned char)pattern[i]] = m - 1 - i;

    int i = 0;
    while (i <= n - m) {
        int j = m - 1;
        while (j >= 0 && pattern[j] == text[i + j])
            j--;
        if (j < 0) {
            printf("Pattern found at index %d\n", i);
            i += shift[(unsigned char)text[i + m - 1]];
        } else {
            i += shift[(unsigned char)text[i + j]];
        }
    }
}

int main() {
    char text[100], pattern[100];
    printf("Enter text: ");
    scanf("%s", text);
    printf("Enter pattern: ");
    scanf("%s", pattern);
    horspool(text, pattern);
    return 0;
}
Heap Sorting using Transform and Conquer Technique

c
Run
Copy code
#include <stdio.h>

void heapify(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
        heapify(arr, n, largest);
    }
}

void heapSort(int arr[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
    for (int i = n - 1; i > 0; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;
        heapify(arr, i, 0);
    }
}

int main() {
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int arr[n];
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    heapSort(arr, n);
    printf("Sorted array: \n");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    return 0;
}
